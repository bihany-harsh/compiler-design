#line 1 "prob2.cpp"

#line 3 "prob2.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
typedef uint64_t flex_uint64_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                yy_size_t yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static yy_size_t yy_n_chars;		/* number of characters read into yy_ch_buf */
yy_size_t yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, yy_size_t len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (yy_size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 11
#define YY_END_OF_BUFFER 12
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[907] =
    {   0,
        0,    0,   12,   11,    1,    1,    1,    1,   10,   10,
       11,   10,    9,    9,    8,    8,   10,    8,    4,    8,
        8,    8,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,   10,    1,    1,    1,    0,    7,    8,    0,
        9,    5,    0,    0,    0,    0,    0,    0,    0,    0,
        8,    5,    4,    0,    0,    0,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    5,    0,    5,    4,    4,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    2,    3,    3,    3,
        2,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        2,    3,    3,    3,    3,    5,    5,    5,    0,    0,
        0,    0,    0,    0,    0,    4,    3,    3,    3,    3,
        3,    3,    2,    2,    2,    3,    3,    3,    3,    3,
        3,    3,    2,    3,    3,    3,    2,    3,    3,    3,
        2,    3,    2,    3,    3,    3,    3,    3,    3,    3,
        2,    3,    3,    3,    3,    3,    3,    2,    3,    3,
        3,    3,    2,    2,    3,    3,    3,    2,    3,    3,
        3,    3,    3,    3,    3,    3,    2,    3,    3,    3,
        3,    3,    2,    3,    3,    2,    3,    3,    3,    2,
        3,    3,    3,    3,    3,    5,    0,    0,    0,    5,

        5,    4,    3,    3,    3,    3,    3,    3,    2,    2,
        3,    3,    3,    3,    3,    2,    3,    3,    3,    3,
        3,    2,    2,    3,    3,    3,    3,    2,    2,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    2,    3,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    2,    3,    2,    2,
        5,    0,    6,    5,    4,    3,    3,    2,    3,    3,
        3,    3,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    2,    2,    3,    3,

        3,    2,    3,    3,    2,    3,    3,    2,    3,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    2,
        3,    2,    2,    2,    3,    2,    3,    3,    3,    2,
        2,    3,    5,    6,    0,    5,    4,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    2,    3,    3,    2,    3,    3,    2,    3,    2,
        2,    3,    3,    3,    2,    3,    3,    3,    2,    2,
        3,    2,    3,    3,    2,    3,    3,    3,    3,    5,
        0,    6,    6,    5,    4,    3,    3,    2,    3,    3,
        3,    3,    2,    3,    2,    2,    3,    2,    3,    3,

        3,    3,    2,    2,    2,    3,    3,    2,    2,    2,
        3,    3,    3,    3,    2,    3,    3,    2,    5,    6,
        6,    6,    5,    4,    3,    3,    2,    3,    2,    3,
        3,    3,    2,    2,    3,    3,    2,    2,    2,    2,
        2,    2,    2,    3,    5,    6,    6,    5,    4,    3,
        3,    3,    3,    2,    2,    2,    3,    2,    5,    6,
        6,    5,    4,    3,    2,    3,    2,    2,    5,    6,
        6,    5,    4,    3,    2,    5,    6,    6,    5,    4,
        3,    5,    6,    6,    5,    4,    3,    5,    6,    6,
        5,    4,    3,    5,    6,    6,    5,    4,    3,    5,

        6,    6,    5,    4,    3,    5,    6,    6,    5,    4,
        3,    5,    6,    6,    5,    4,    3,    5,    6,    6,
        5,    4,    3,    5,    6,    6,    5,    4,    3,    5,
        6,    6,    5,    4,    3,    5,    6,    6,    5,    4,
        3,    5,    6,    6,    5,    4,    3,    5,    6,    6,
        5,    4,    3,    5,    6,    6,    5,    4,    3,    5,
        6,    6,    5,    4,    3,    5,    6,    6,    5,    4,
        3,    5,    6,    6,    5,    4,    3,    5,    6,    6,
        5,    4,    3,    5,    6,    6,    5,    4,    3,    5,
        6,    6,    5,    4,    3,    5,    6,    6,    5,    4,

        3,    5,    6,    6,    5,    4,    3,    5,    6,    6,
        5,    4,    3,    5,    6,    6,    5,    4,    3,    5,
        6,    6,    5,    4,    3,    5,    6,    6,    5,    4,
        3,    5,    6,    6,    5,    4,    3,    5,    6,    6,
        5,    4,    3,    5,    6,    6,    5,    4,    3,    5,
        6,    6,    5,    4,    3,    5,    6,    6,    5,    4,
        3,    5,    6,    6,    5,    4,    3,    5,    6,    6,
        5,    4,    3,    5,    6,    6,    5,    4,    3,    5,
        6,    6,    5,    4,    3,    5,    6,    6,    5,    4,
        3,    5,    6,    6,    5,    4,    3,    5,    6,    6,

        5,    4,    3,    5,    6,    6,    5,    4,    3,    5,
        6,    6,    5,    4,    3,    5,    6,    6,    5,    4,
        3,    5,    6,    6,    5,    4,    3,    5,    6,    6,
        5,    4,    3,    5,    6,    6,    5,    4,    3,    5,
        6,    6,    5,    4,    3,    5,    6,    6,    5,    4,
        3,    5,    6,    6,    5,    4,    3,    5,    6,    6,
        5,    4,    3,    5,    6,    6,    5,    4,    3,    5,
        6,    6,    5,    4,    3,    5,    6,    6,    5,    4,
        3,    5,    6,    6,    5,    4,    5,    6,    6,    5,
        4,    5,    6,    6,    5,    6,    6,    5,    6,    6,

        6,    6,    6,    6,    6,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    9,    1,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   33,
       34,   35,   36,   37,   38,   39,   40,   41,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   52,   37,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   37,   68,   69,   70,   71,
       72,   73,   74,   75,   76,   77,   78,   79,   80,   81,
       82,   37,   83,   84,   85,   86,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[87] =
    {   0,
        1,    1,    1,    1,    1,    1,    2,    1,    1,    1,
        3,    1,    1,    1,    1,    1,    1,    1,    1,    4,
        1,    1,    1,    1,    1,    1,    1,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    1,    1,    1,    1,    5,    1,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[1287] =
    {   0,
        0,    0, 1095, 1847, 1847, 1083, 1847, 1082, 1076, 1847,
     1072, 1067, 1056, 1847, 1060, 1847,   67,   78,   72,   65,
     1047,   69,   71,   83,  109,  113,  118,  131,   80,    0,
      142,   56,   74,  146,  122,  162,   64,  169,  191,  184,
      180,  188,  986, 1847, 1066, 1847, 1060, 1847, 1847, 1055,
     1847,  211,   82,  112,  105,  164,  182,  206,  190,  191,
     1847,  244,  252,   98,  236, 1043,    0,  210,  215,  141,
      217,  241,  253,  258,  226,  241,  239,  249,  252,    0,
      248,  287,  248,  264,  262,  273,  278,  286,  289,  285,
        0,  293,  308,  289,  306,  300,  299,  304,  305,  314,

      330,  312,  344,  327,  353,  305,  319,  317,  338,  326,
      358,  353,  362,  357,  358,  368,  371, 1042, 1040, 1038,
      378,  392,  363,  917,  708,  668,  627,  395,  368,  556,
      369,  411,  521,  101,  518,    0,    0,  376,  392,  378,
      382,  392,  397,  392,  391,  400,  408,  411,  405,  406,
      417,  429,  421,  426,  429,  430,  444,  420,  430,  427,
      425,  446,  451,  438,  457,  457,  459,  454,  459,  460,
      455,  472,  468,  459,  480,  485,  476,  467,  479,  485,
      497,  477,  484,  491,  493,  521,  500,  509,  498,  500,
      509,  522,  527,  529,  515,  522,  530,  539,  525,  535,

        0,  531,  552,  544,  537,  561,  485,    0,  377,  329,
      539,  542,  327,  556,  319,    0,    0,  564,  565,  571,
      572,  560,    0,    0,    0,  562,  571,  570,  570,  588,
      581,  588,    0,  583,  578,  585,  577,  592,  596,  579,
      603,  588,    0,  598,  602,  609,  607,  621,  607,  613,
        0,  614,  617,  615,  628,  627,  629,    0,  631,  635,
      631,  642,    0,    0,  651,  640,  643,    0,  653,  640,
      642,  662,  659,  649,  665,  663,    0,  656,  664,  660,
      665,  672,    0,  681,  682,    0,  676,  678,  683,    0,
      693,  693,  680,  697,  700,    0,  702,  287,  286,  270,

        0,    0,    0,  709,  699,  702,  706,  700,    0,    0,
      712,  706,  713,  717,  722,    0,  713,  714,  715,  718,
      723,    0,    0,  719,  738,  736,  730,    0,    0,  735,
      729,  742,  743,  751,  739,  756,  745,  746,  762,  758,
      764,  764,  756,  770,  758,  766,  776,    0,  779,    0,
      766,  783,  787,  787,  789,  775,  775,  783,  794,  781,
      783,  792,  805,  790,  793,  803,    0,  808,    0,    0,
        0,  267,  187,    0,    0,    0,  800,    0,  821,  808,
      827,  816,    0,  818,  813,  814,  836,  835,  834,  833,
      840,  841,  846,  837,  832,  851,    0,    0,  839,  852,

      848,    0,  853,  856,    0,  862,  847,    0,  848,    0,
      846,  857,  873,  860,  864,  870,  864,  874,  870,    0,
      882,    0,    0,    0,  888,    0,  892,  877,  879,    0,
        0,  888,    0,  163,  195,    0,    0,    0,  902,  889,
      896,  901,  894,  895,  901,  913,  909,  918,  919,  910,
      909,    0,  911,  927,    0,  924,  923,    0,  920,    0,
        0,  930,  933,  925,    0,  929,  936,  947,    0,    0,
      938,    0,  948,  936,    0,  954,  950,  951,  960,    0,
      157,  146,    0,    0,    0,    0,  966,    0,  964,  957,
      967,  965,    0,  955,    0,    0,  959,    0,  966,  976,

      970,  973,    0,    0,    0,  977,  986,    0,    0,    0,
      975,  989,  991,  992,    0,  993,  988,    0,    0,  140,
        0,    0,    0,    0,    0,  992,    0,  992,    0,  993,
      992, 1009,    0,    0,  998, 1015,    0,    0,    0,    0,
        0,    0,    0, 1014,    0,    0,    0,    0,    0,    0,
     1016, 1003, 1013,    0,    0,    0, 1017,    0,    0,    0,
        0,    0,    0,    0,    0, 1011,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1847,    0,    0,    0,    0,    0,    0,    0,    0,    0,
     1847, 1847,    0,    0,    0,    0,    0, 1847,    0,    0,

        0,    0,    0, 1847, 1847, 1847, 1087, 1092, 1097, 1099,
      121, 1101,  120, 1103, 1105, 1107,  116, 1109, 1111, 1113,
     1115, 1117, 1119, 1121, 1123, 1125, 1127, 1129,  103, 1131,
     1133, 1135, 1137,  101, 1139, 1141, 1143, 1145, 1147, 1149,
     1151, 1153, 1155, 1157, 1159, 1161, 1163, 1165, 1167, 1169,
     1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189,
     1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209,
     1211, 1213, 1215, 1217, 1219, 1221, 1223, 1225, 1227, 1229,
     1231, 1233, 1235, 1237, 1239, 1241, 1243, 1245, 1247, 1249,
     1251, 1253, 1255, 1257, 1259, 1261, 1263, 1265, 1267, 1269,

     1271, 1273, 1275, 1277, 1279, 1281, 1283, 1285, 1287, 1289,
     1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309,
     1311, 1313, 1315, 1317, 1319, 1321, 1323, 1325, 1327, 1329,
     1331, 1333, 1335, 1337, 1339, 1341, 1343, 1345, 1347, 1349,
     1351, 1353, 1355, 1357, 1359, 1361, 1363, 1365, 1367, 1369,
     1371, 1373, 1375, 1377, 1379, 1381, 1383, 1385, 1387, 1389,
     1391, 1393, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409,
     1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429,
     1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 1449,
     1451, 1453, 1455, 1457, 1459, 1461, 1463, 1465, 1467, 1469,

     1471, 1473, 1475, 1477, 1479, 1481, 1483, 1485, 1487, 1489,
     1491, 1493, 1495, 1497, 1499, 1501, 1503, 1505, 1507, 1509,
     1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529,
     1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549,
     1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569,
     1571, 1573, 1575, 1577, 1579, 1581, 1583, 1585, 1587, 1589,
     1591, 1593, 1595, 1597, 1599, 1601, 1603, 1605, 1607, 1609,
     1611, 1613, 1615, 1617, 1619, 1621, 1623, 1625, 1627, 1629,
     1631, 1633, 1635, 1637, 1639, 1641, 1643, 1645, 1647, 1649,
     1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669,

     1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689,
     1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709,
     1711, 1713, 1715, 1717, 1719, 1721, 1723, 1725, 1727, 1729,
     1731, 1733, 1735, 1737, 1739, 1741, 1743, 1745, 1747, 1749,
     1751, 1753, 1755, 1757, 1759, 1761, 1763, 1765, 1767, 1769,
     1771, 1773, 1775, 1777, 1779, 1781, 1783, 1785, 1787, 1789,
     1791, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809,
     1811, 1813, 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829,
     1831, 1833, 1835, 1837, 1839, 1841
    } ;

static const flex_int16_t yy_def[1287] =
    {   0,
      906,    1,  906,  906,  906,  906,  906,  907,  908,  906,
      906,  909,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  910,  910,  910,  910,  910,  910,  910,  910,
      910,  910,  906,  906,  907,  906,  908,  906,  906,  909,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  911,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,

      912,  912,  912,  912,  912,  912,  912,  912,  912,  912,
      912,  912,  912,  912,  912,  912,  912,  906,  906,  913,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  914,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,
      915,  915,  915,  915,  915,  915,  915,  915,  915,  915,

      915,  915,  915,  915,  915,  906,  906,  916,  906,  906,
      906,  906,  906,  906,  917,  918,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  919,  919,  919,  919,  919,
      919,  919,  919,  919,  919,  920,  906,  906,  906,  906,

      921,  922,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      923,  923,  923,  923,  923,  923,  923,  923,  923,  923,
      924,  906,  906,  925,  926,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,

      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  927,  927,  927,  927,  927,  927,  927,  927,
      927,  927,  928,  906,  929,  930,  931,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  932,
      932,  932,  932,  932,  932,  932,  932,  932,  932,  933,
      934,  906,  935,  936,  937,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,

      938,  938,  938,  938,  938,  938,  938,  938,  938,  938,
      938,  938,  938,  938,  938,  938,  938,  938,  939,  906,
      940,  941,  942,  943,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  944,  944,  944,  944,  944,  944,
      944,  944,  944,  944,  945,  946,  947,  948,  949,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  951,  952,
      953,  954,  955,  956,  956,  956,  956,  956,  957,  958,
      959,  960,  961,  962,  962,  963,  964,  965,  966,  967,
      968,  969,  970,  971,  972,  973,  974,  975,  976,  977,
      978,  979,  980,  981,  982,  983,  984,  985,  986,  987,

      988,  989,  990,  991,  992,  993,  994,  995,  996,  997,
      998,  999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007,
     1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017,
     1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027,
     1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037,
     1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047,
     1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
     1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067,
     1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077,
     1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087,

     1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097,
     1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107,
     1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117,
     1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
     1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137,
     1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147,
     1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157,
     1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167,
     1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177,
     1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187,

     1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197,
     1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207,
     1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217,
     1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227,
     1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237,
     1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247,
     1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257,
     1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267,
      906, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276,
      906,  906, 1277, 1278, 1279, 1280, 1281,  906, 1282, 1283,

     1284, 1285, 1286,  906,  906,    0,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906
    } ;

static const flex_int16_t yy_nxt[1934] =
    {   0,
        4,    5,    5,    6,    7,    8,    9,   10,   10,   11,
       12,   13,   14,   15,   16,   10,   16,   17,   18,   19,
       10,   10,   20,   21,   22,   10,   10,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   30,   30,   32,   33,
       34,   35,   36,   30,   37,   38,   39,   40,   41,   42,
       30,   30,   14,   10,   14,   10,    4,   10,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   30,   32,   33,
       34,   35,   36,   30,   37,   38,   39,   40,   41,   42,
       30,   30,   10,   43,   10,   10,   52,   49,   61,   62,
       51,   63,   61,   49,   53,  105,   49,   94,   54,   55,

       56,   61,   64,   65,  521,   57,  483,   58,   59,   68,
       70,   89,  133,   60,  133,   95,   69,  134,   71,  301,
      134,   90,  121,  208,  136,   53,  105,   94,   66,   54,
       55,   56,  123,   64,   65,   57,   72,   58,   59,   68,
       77,   70,   89,   60,   78,   95,   69,   73,   79,   71,
       74,   90,  121,   75,   80,  122,   81,  215,   82,  520,
       76,   83,   99,  123,  100,  482,   85,   72,   84,   86,
      141,   77,   87,   96,   91,   78,  520,   73,   88,   79,
       74,   92,   93,   75,   80,  122,   81,   97,   82,  101,
       76,   83,   99,   98,  100,  124,  106,   85,   84,   86,

      107,  141,   87,  102,   96,   91,  103,  114,   88,  104,
      125,   92,   93,  126,  482,  108,  109,   97,  110,  481,
      101,  115,  116,   98,  112,  111,  124,  106,  127,  113,
       52,  107,  117,  102,  130,  131,  103,  128,  114,  104,
      125,  118,  119,  435,  126,  108,  109,  129,  138,  110,
      133,  115,  133,  116,  112,  134,  111,  142,  127,  113,
      139,  150,  117,  132,  130,  131,  140,  120,  128,   62,
      151,   63,  118,  119,  118,  119,  153,  129,  138,  143,
      145,  154,   64,   65,  434,  152,  144,  142,  147,  300,
      139,  155,  150,  156,  146,  160,  140,  148,  149,  161,

      120,  151,  163,  373,   49,  118,  119,  153,   66,  143,
      162,  145,  154,   64,   65,  152,  144,  157,  173,  147,
      164,  155,  165,  156,  146,  160,  166,  148,  149,  167,
      161,  168,  163,  158,  159,  169,  174,  170,  300,  175,
      162,  176,  177,  178,   49,  179,   49,  184,  157,  173,
      164,  171,  165,  193,  172,  187,  166,  194,  196,  167,
      180,  168,  195,  158,  159,  169,  197,  174,  170,  175,
      198,  176,  177,  178,  181,  182,  179,  183,  184,  185,
      188,  171,  189,  193,  172,  186,  187,  194,  196,  199,
      180,  200,  195,  201,   49,  202,  203,  197,  190,  191,

      198,  211,  192,  204,  181,  182,  205,  183,  209,   61,
      185,  188,   61,  189,  213,  186,  214,  218,  221,  222,
      199,  200,  223,  225,  201,  202,  203,  219,  190,  191,
      132,  211,  192,  220,  204,  224,  226,  205,  212,  209,
      210,  118,  119,  228,  213,  227,  214,  218,  221,  222,
      229,  230,  231,  223,  225,  232,  233,  235,  219,  234,
      236,  237,  242,  220,  240,  224,  226,  120,  212,  241,
      210,  243,  118,  119,  228,  227,  238,  244,  245,  239,
      229,  230,  231,  246,  247,  232,  249,  233,  235,  234,
      250,  236,  237,  242,  240,  251,  248,  252,  254,  241,

      253,  243,  255,  256,  207,  258,  259,  238,  244,  245,
      239,  260,  261,  246,  262,  247,  257,  249,  263,  264,
      266,  250,  268,  265,  267,  251,  248,  252,  254,  269,
      253,  270,  255,  271,  256,  258,  259,  135,  276,  277,
      134,  272,  260,  261,  262,  278,  257,  279,  263,  264,
      273,  266,  268,  265,  274,  267,  280,  281,  283,  269,
      284,  270,  285,  271,  286,  290,  282,  275,  276,  287,
      277,  272,  289,   49,  288,  278,  291,  279,  292,  293,
      206,  273,  294,  295,  297,  274,  280,  299,  281,  283,
      298,  284,  285,  304,  286,  290,  282,  275,  305,  287,

      306,  307,  310,  289,  288,  308,  291,  309,  292,  311,
      293,  312,  294,  295,  297,  313,  315,  120,  299,  316,
      298,  317,  318,  314,  304,  319,  320,  321,  322,  305,
      323,  306,  307,  310,  324,  308,  325,  309,  326,  311,
      328,  312,  327,  329,   61,  330,  313,  315,  331,  334,
      316,  317,  318,  332,  314,  319,  320,  333,  321,  322,
      323,  335,  336,  337,  340,  324,  325,  338,  326,  341,
      328,  339,  327,  342,  329,  330,  343,  344,  345,  331,
      334,  346,  347,  332,  348,   61,  349,  333,  350,  351,
      352,  335,  336,  353,  337,  340,  354,  338,  355,  341,

      356,  339,  357,  342,  358,  359,  343,  360,  344,  345,
      361,  346,  347,  362,  365,  348,  349,  363,  350,  364,
      351,  352,  366,  353,  367,   61,  368,  354,  369,  355,
      356,  370,  357,  372,  358,  359,  377,  379,  360,  378,
      380,  361,  381,  382,  362,  365,  383,  363,  384,  364,
      385,  387,  391,  366,  388,  367,  368,  386,  389,  369,
      390,  392,  370,  393,  372,  394,  395,  377,  379,  378,
      396,  380,  381,  397,  382,  398,  383,  399,  400,  384,
      401,  385,  387,  391,  388,  402,  403,  386,  389,  404,
      390,  392,  405,  393,  406,  408,  394,  395,  407,  409,

      396,  410,  411,  397,  412,  398,  413,  414,  399,  400,
      415,  401,  416,  417,  418,  402,  419,  403,  420,  404,
      421,  422,  405,  423,  424,  406,  408,  425,  407,  426,
      409,  410,  427,  411,  412,  428,  413,  429,  414,  430,
      431,  415,  416,  432,  417,  418,  439,  419,  440,  420,
      421,  422,  441,  423,  442,  424,  443,  425,  444,  426,
      445,  446,  427,  447,  448,  449,  428,  429,  450,  430,
      431,  451,  452,  453,  432,  454,  439,  455,  456,  440,
      457,  458,  441,  459,  460,  442,  443,  461,  444,  462,
      445,  446,  463,  464,  447,  448,  449,  465,  466,  450,

      467,  470,  451,  452,  453,  454,  468,  455,  469,  456,
      457,  471,  458,  472,  459,  460,  473,  474,  461,  475,
      462,  476,  463,  464,  477,  478,  479,  465,  466,  487,
      491,  467,  470,  488,   61,  489,  468,  490,  469,  492,
      493,  471,  494,  472,  495,  497,  473,  496,  474,  498,
      475,  499,  476,  500,  477,  478,  479,  501,  502,  506,
      487,  491,  503,  504,  488,  489,  505,  490,  507,  492,
      493,  508,  494,  509,  510,  495,  497,  496,  511,  513,
      498,  499,  512,  500,  514,  515,  517,  501,  516,  502,
      506,  518,  503,  504,  526,  527,  505,  528,  529,  507,

      530,  508,  531,  509,  510,  532,  533,  534,  537,  511,
      513,  535,  512,  536,  514,  538,  515,  517,  516,  539,
      540,  541,  518,  542,  543,  526,  527,  528,  544,  529,
      551,  530,  531,  552,  553,  532,  533,  554,  534,  537,
      555,  535,  556,  536,  557,  558,  538,  565,  568,  539,
      566,  540,  541,  567,  542,  543,  575,  207,  544,  206,
      551,  206,  135,  552,  553,   48,   48,  554,   46,   49,
       61,  555,  556,   49,   51,  557,  558,   48,  565,  568,
      566,   49,   48,  567,   46,   44,  575,   45,   45,   45,
       45,   45,   47,   47,  906,   47,   47,   50,  906,   50,

       50,   50,   67,   67,  137,  137,  216,  216,  217,  217,
      296,  296,  302,  302,  303,  303,  371,  371,  374,  374,
      375,  375,  376,  376,  433,  433,  436,  436,  437,  437,
      438,  438,  480,  480,  484,  484,  485,  485,  486,  486,
      519,  519,  522,  522,  523,  523,  524,  524,  525,  525,
      545,  545,  546,  546,  547,  547,  548,  548,  549,  549,
      550,  550,  559,  559,  560,  560,  561,  561,  562,  562,
      563,  563,  564,  564,  569,  569,  570,  570,  571,  571,
      572,  572,  573,  573,  574,  574,  576,  576,  577,  577,
      578,  578,  579,  579,  580,  580,  581,  581,  582,  582,

      583,  583,  584,  584,  585,  585,  586,  586,  587,  587,
      588,  588,  589,  589,  590,  590,  591,  591,  592,  592,
      593,  593,  594,  594,  595,  595,  596,  596,  597,  597,
      598,  598,  599,  599,  600,  600,  601,  601,  602,  602,
      603,  603,  604,  604,  605,  605,  606,  606,  607,  607,
      608,  608,  609,  609,  610,  610,  611,  611,  612,  612,
      613,  613,  614,  614,  615,  615,  616,  616,  617,  617,
      618,  618,  619,  619,  620,  620,  621,  621,  622,  622,
      623,  623,  624,  624,  625,  625,  626,  626,  627,  627,
      628,  628,  629,  629,  630,  630,  631,  631,  632,  632,

      633,  633,  634,  634,  635,  635,  636,  636,  637,  637,
      638,  638,  639,  639,  640,  640,  641,  641,  642,  642,
      643,  643,  644,  644,  645,  645,  646,  646,  647,  647,
      648,  648,  649,  649,  650,  650,  651,  651,  652,  652,
      653,  653,  654,  654,  655,  655,  656,  656,  657,  657,
      658,  658,  659,  659,  660,  660,  661,  661,  662,  662,
      663,  663,  664,  664,  665,  665,  666,  666,  667,  667,
      668,  668,  669,  669,  670,  670,  671,  671,  672,  672,
      673,  673,  674,  674,  675,  675,  676,  676,  677,  677,
      678,  678,  679,  679,  680,  680,  681,  681,  682,  682,

      683,  683,  684,  684,  685,  685,  686,  686,  687,  687,
      688,  688,  689,  689,  690,  690,  691,  691,  692,  692,
      693,  693,  694,  694,  695,  695,  696,  696,  697,  697,
      698,  698,  699,  699,  700,  700,  701,  701,  702,  702,
      703,  703,  704,  704,  705,  705,  706,  706,  707,  707,
      708,  708,  709,  709,  710,  710,  711,  711,  712,  712,
      713,  713,  714,  714,  715,  715,  716,  716,  717,  717,
      718,  718,  719,  719,  720,  720,  721,  721,  722,  722,
      723,  723,  724,  724,  725,  725,  726,  726,  727,  727,
      728,  728,  729,  729,  730,  730,  731,  731,  732,  732,

      733,  733,  734,  734,  735,  735,  736,  736,  737,  737,
      738,  738,  739,  739,  740,  740,  741,  741,  742,  742,
      743,  743,  744,  744,  745,  745,  746,  746,  747,  747,
      748,  748,  749,  749,  750,  750,  751,  751,  752,  752,
      753,  753,  754,  754,  755,  755,  756,  756,  757,  757,
      758,  758,  759,  759,  760,  760,  761,  761,  762,  762,
      763,  763,  764,  764,  765,  765,  766,  766,  767,  767,
      768,  768,  769,  769,  770,  770,  771,  771,  772,  772,
      773,  773,  774,  774,  775,  775,  776,  776,  777,  777,
      778,  778,  779,  779,  780,  780,  781,  781,  782,  782,

      783,  783,  784,  784,  785,  785,  786,  786,  787,  787,
      788,  788,  789,  789,  790,  790,  791,  791,  792,  792,
      793,  793,  794,  794,  795,  795,  796,  796,  797,  797,
      798,  798,  799,  799,  800,  800,  801,  801,  802,  802,
      803,  803,  804,  804,  805,  805,  806,  806,  807,  807,
      808,  808,  809,  809,  810,  810,  811,  811,  812,  812,
      813,  813,  814,  814,  815,  815,  816,  816,  817,  817,
      818,  818,  819,  819,  820,  820,  821,  821,  822,  822,
      823,  823,  824,  824,  825,  825,  826,  826,  827,  827,
      828,  828,  829,  829,  830,  830,  831,  831,  832,  832,

      833,  833,  834,  834,  835,  835,  836,  836,  837,  837,
      838,  838,  839,  839,  840,  840,  841,  841,  842,  842,
      843,  843,  844,  844,  845,  845,  846,  846,  847,  847,
      848,  848,  849,  849,  850,  850,  851,  851,  852,  852,
      853,  853,  854,  854,  855,  855,  856,  856,  857,  857,
      858,  858,  859,  859,  860,  860,  861,  861,  862,  862,
      863,  863,  864,  864,  865,  865,  866,  866,  867,  867,
      868,  868,  869,  869,  870,  870,  871,  871,  872,  872,
      873,  873,  874,  874,  875,  875,  876,  876,  877,  877,
      878,  878,  879,  879,  880,  880,  881,  881,  882,  882,

      883,  883,  884,  884,  885,  885,  886,  886,  887,  887,
      888,  888,  889,  889,  890,  890,  891,  891,  892,  892,
      893,  893,  894,  894,  895,  895,  896,  896,  897,  897,
      898,  898,  899,  899,  900,  900,  901,  901,  902,  902,
      903,  903,  904,  904,  905,  905,    3,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906
    } ;

static const flex_int16_t yy_chk[1934] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,   17,   20,   20,   19,
       18,   19,   22,   22,   17,   37,   18,   32,   17,   17,

       17,   18,   19,   19,  934,   17,  929,   17,   17,   23,
       24,   29,   64,   17,   64,   33,   23,   64,   24,  917,
      134,   29,   53,  913,  911,   17,   37,   32,   19,   17,
       17,   17,   55,   19,   19,   17,   25,   17,   17,   23,
       26,   24,   29,   17,   26,   33,   23,   25,   26,   24,
       25,   29,   53,   25,   26,   54,   27,  134,   27,  520,
       25,   27,   35,   55,   35,  482,   28,   25,   27,   28,
       70,   26,   28,   34,   31,   26,  481,   25,   28,   26,
       25,   31,   31,   25,   26,   54,   27,   34,   27,   36,
       25,   27,   35,   34,   35,   56,   38,   28,   27,   28,

       38,   70,   28,   36,   34,   31,   36,   41,   28,   36,
       56,   31,   31,   57,  435,   38,   38,   34,   39,  434,
       36,   41,   42,   34,   40,   39,   56,   38,   57,   40,
       52,   38,   42,   36,   59,   60,   36,   58,   41,   36,
       56,   52,   52,  373,   57,   38,   38,   58,   68,   39,
       65,   41,   65,   42,   40,   65,   39,   71,   57,   40,
       69,   75,   42,   62,   59,   60,   69,   52,   58,   63,
       76,   63,   52,   52,   62,   62,   78,   58,   68,   72,
       73,   78,   63,   63,  372,   77,   72,   71,   74,  300,
       69,   79,   75,   81,   73,   83,   69,   74,   74,   84,

       62,   76,   85,  299,  298,   62,   62,   78,   63,   72,
       84,   73,   78,   63,   63,   77,   72,   82,   94,   74,
       86,   79,   87,   81,   73,   83,   88,   74,   74,   89,
       84,   90,   85,   82,   82,   92,   95,   93,  215,   96,
       84,   97,   98,   99,  213,  100,  210,  102,   82,   94,
       86,   93,   87,  106,   93,  104,   88,  107,  108,   89,
      100,   90,  107,   82,   82,   92,  109,   95,   93,   96,
      110,   97,   98,   99,  101,  101,  100,  101,  102,  103,
      105,   93,  105,  106,   93,  103,  104,  107,  108,  111,
      100,  112,  107,  113,  209,  114,  115,  109,  105,  105,

      110,  123,  105,  116,  101,  101,  117,  101,  121,  122,
      103,  105,  128,  105,  129,  103,  131,  138,  140,  141,
      111,  112,  142,  144,  113,  114,  115,  139,  105,  105,
      132,  123,  105,  139,  116,  143,  145,  117,  128,  121,
      122,  132,  132,  147,  129,  146,  131,  138,  140,  141,
      148,  149,  150,  142,  144,  151,  152,  154,  139,  153,
      155,  156,  160,  139,  158,  143,  145,  132,  128,  159,
      122,  161,  132,  132,  147,  146,  157,  162,  163,  157,
      148,  149,  150,  164,  165,  151,  166,  152,  154,  153,
      167,  155,  156,  160,  158,  168,  165,  169,  170,  159,

      169,  161,  171,  172,  207,  173,  174,  157,  162,  163,
      157,  175,  176,  164,  177,  165,  172,  166,  178,  179,
      180,  167,  182,  179,  181,  168,  165,  169,  170,  183,
      169,  184,  171,  185,  172,  173,  174,  135,  187,  188,
      133,  185,  175,  176,  177,  189,  172,  190,  178,  179,
      186,  180,  182,  179,  186,  181,  191,  192,  193,  183,
      194,  184,  195,  185,  196,  199,  192,  186,  187,  197,
      188,  185,  198,  130,  197,  189,  200,  190,  202,  203,
      206,  186,  204,  205,  211,  186,  191,  214,  192,  193,
      212,  194,  195,  218,  196,  199,  192,  186,  219,  197,

      220,  221,  227,  198,  197,  222,  200,  226,  202,  228,
      203,  229,  204,  205,  211,  230,  231,  206,  214,  232,
      212,  234,  235,  230,  218,  236,  237,  238,  239,  219,
      240,  220,  221,  227,  241,  222,  242,  226,  244,  228,
      245,  229,  244,  246,  127,  247,  230,  231,  248,  252,
      232,  234,  235,  249,  230,  236,  237,  250,  238,  239,
      240,  253,  254,  255,  257,  241,  242,  256,  244,  259,
      245,  256,  244,  260,  246,  247,  261,  262,  265,  248,
      252,  266,  267,  249,  269,  126,  270,  250,  271,  272,
      273,  253,  254,  274,  255,  257,  275,  256,  276,  259,

      278,  256,  279,  260,  280,  281,  261,  282,  262,  265,
      284,  266,  267,  285,  289,  269,  270,  287,  271,  288,
      272,  273,  291,  274,  292,  125,  293,  275,  294,  276,
      278,  295,  279,  297,  280,  281,  304,  306,  282,  305,
      307,  284,  308,  311,  285,  289,  312,  287,  313,  288,
      314,  315,  320,  291,  317,  292,  293,  314,  318,  294,
      319,  321,  295,  324,  297,  325,  326,  304,  306,  305,
      327,  307,  308,  330,  311,  331,  312,  332,  333,  313,
      334,  314,  315,  320,  317,  335,  336,  314,  318,  337,
      319,  321,  338,  324,  339,  341,  325,  326,  340,  342,

      327,  343,  344,  330,  345,  331,  346,  347,  332,  333,
      349,  334,  351,  352,  353,  335,  354,  336,  355,  337,
      356,  357,  338,  358,  359,  339,  341,  360,  340,  361,
      342,  343,  362,  344,  345,  363,  346,  364,  347,  365,
      366,  349,  351,  368,  352,  353,  377,  354,  379,  355,
      356,  357,  380,  358,  381,  359,  382,  360,  384,  361,
      385,  386,  362,  387,  388,  389,  363,  364,  390,  365,
      366,  391,  392,  393,  368,  394,  377,  395,  396,  379,
      399,  400,  380,  401,  403,  381,  382,  404,  384,  406,
      385,  386,  407,  409,  387,  388,  389,  411,  412,  390,

      413,  416,  391,  392,  393,  394,  414,  395,  415,  396,
      399,  417,  400,  418,  401,  403,  419,  421,  404,  425,
      406,  427,  407,  409,  428,  429,  432,  411,  412,  439,
      442,  413,  416,  439,  124,  440,  414,  441,  415,  443,
      444,  417,  445,  418,  446,  448,  419,  447,  421,  449,
      425,  450,  427,  451,  428,  429,  432,  453,  454,  462,
      439,  442,  456,  457,  439,  440,  459,  441,  463,  443,
      444,  464,  445,  466,  467,  446,  448,  447,  468,  473,
      449,  450,  471,  451,  474,  476,  478,  453,  477,  454,
      462,  479,  456,  457,  487,  489,  459,  490,  491,  463,

      492,  464,  494,  466,  467,  497,  499,  500,  506,  468,
      473,  501,  471,  502,  474,  507,  476,  478,  477,  511,
      512,  513,  479,  514,  516,  487,  489,  490,  517,  491,
      526,  492,  494,  528,  530,  497,  499,  531,  500,  506,
      532,  501,  535,  502,  536,  544,  507,  551,  557,  511,
      552,  512,  513,  553,  514,  516,  566,  120,  517,  119,
      526,  118,   66,  528,  530,   50,   47,  531,   45,   43,
       21,  532,  535,   15,   13,  536,  544,   12,  551,  557,
      552,   11,    9,  553,    8,    6,  566,  907,  907,  907,
      907,  907,  908,  908,    3,  908,  908,  909,    0,  909,

      909,  909,  910,  910,  912,  912,  914,  914,  915,  915,
      916,  916,  918,  918,  919,  919,  920,  920,  921,  921,
      922,  922,  923,  923,  924,  924,  925,  925,  926,  926,
      927,  927,  928,  928,  930,  930,  931,  931,  932,  932,
      933,  933,  935,  935,  936,  936,  937,  937,  938,  938,
      939,  939,  940,  940,  941,  941,  942,  942,  943,  943,
      944,  944,  945,  945,  946,  946,  947,  947,  948,  948,
      949,  949,  950,  950,  951,  951,  952,  952,  953,  953,
      954,  954,  955,  955,  956,  956,  957,  957,  958,  958,
      959,  959,  960,  960,  961,  961,  962,  962,  963,  963,

      964,  964,  965,  965,  966,  966,  967,  967,  968,  968,
      969,  969,  970,  970,  971,  971,  972,  972,  973,  973,
      974,  974,  975,  975,  976,  976,  977,  977,  978,  978,
      979,  979,  980,  980,  981,  981,  982,  982,  983,  983,
      984,  984,  985,  985,  986,  986,  987,  987,  988,  988,
      989,  989,  990,  990,  991,  991,  992,  992,  993,  993,
      994,  994,  995,  995,  996,  996,  997,  997,  998,  998,
      999,  999, 1000, 1000, 1001, 1001, 1002, 1002, 1003, 1003,
     1004, 1004, 1005, 1005, 1006, 1006, 1007, 1007, 1008, 1008,
     1009, 1009, 1010, 1010, 1011, 1011, 1012, 1012, 1013, 1013,

     1014, 1014, 1015, 1015, 1016, 1016, 1017, 1017, 1018, 1018,
     1019, 1019, 1020, 1020, 1021, 1021, 1022, 1022, 1023, 1023,
     1024, 1024, 1025, 1025, 1026, 1026, 1027, 1027, 1028, 1028,
     1029, 1029, 1030, 1030, 1031, 1031, 1032, 1032, 1033, 1033,
     1034, 1034, 1035, 1035, 1036, 1036, 1037, 1037, 1038, 1038,
     1039, 1039, 1040, 1040, 1041, 1041, 1042, 1042, 1043, 1043,
     1044, 1044, 1045, 1045, 1046, 1046, 1047, 1047, 1048, 1048,
     1049, 1049, 1050, 1050, 1051, 1051, 1052, 1052, 1053, 1053,
     1054, 1054, 1055, 1055, 1056, 1056, 1057, 1057, 1058, 1058,
     1059, 1059, 1060, 1060, 1061, 1061, 1062, 1062, 1063, 1063,

     1064, 1064, 1065, 1065, 1066, 1066, 1067, 1067, 1068, 1068,
     1069, 1069, 1070, 1070, 1071, 1071, 1072, 1072, 1073, 1073,
     1074, 1074, 1075, 1075, 1076, 1076, 1077, 1077, 1078, 1078,
     1079, 1079, 1080, 1080, 1081, 1081, 1082, 1082, 1083, 1083,
     1084, 1084, 1085, 1085, 1086, 1086, 1087, 1087, 1088, 1088,
     1089, 1089, 1090, 1090, 1091, 1091, 1092, 1092, 1093, 1093,
     1094, 1094, 1095, 1095, 1096, 1096, 1097, 1097, 1098, 1098,
     1099, 1099, 1100, 1100, 1101, 1101, 1102, 1102, 1103, 1103,
     1104, 1104, 1105, 1105, 1106, 1106, 1107, 1107, 1108, 1108,
     1109, 1109, 1110, 1110, 1111, 1111, 1112, 1112, 1113, 1113,

     1114, 1114, 1115, 1115, 1116, 1116, 1117, 1117, 1118, 1118,
     1119, 1119, 1120, 1120, 1121, 1121, 1122, 1122, 1123, 1123,
     1124, 1124, 1125, 1125, 1126, 1126, 1127, 1127, 1128, 1128,
     1129, 1129, 1130, 1130, 1131, 1131, 1132, 1132, 1133, 1133,
     1134, 1134, 1135, 1135, 1136, 1136, 1137, 1137, 1138, 1138,
     1139, 1139, 1140, 1140, 1141, 1141, 1142, 1142, 1143, 1143,
     1144, 1144, 1145, 1145, 1146, 1146, 1147, 1147, 1148, 1148,
     1149, 1149, 1150, 1150, 1151, 1151, 1152, 1152, 1153, 1153,
     1154, 1154, 1155, 1155, 1156, 1156, 1157, 1157, 1158, 1158,
     1159, 1159, 1160, 1160, 1161, 1161, 1162, 1162, 1163, 1163,

     1164, 1164, 1165, 1165, 1166, 1166, 1167, 1167, 1168, 1168,
     1169, 1169, 1170, 1170, 1171, 1171, 1172, 1172, 1173, 1173,
     1174, 1174, 1175, 1175, 1176, 1176, 1177, 1177, 1178, 1178,
     1179, 1179, 1180, 1180, 1181, 1181, 1182, 1182, 1183, 1183,
     1184, 1184, 1185, 1185, 1186, 1186, 1187, 1187, 1188, 1188,
     1189, 1189, 1190, 1190, 1191, 1191, 1192, 1192, 1193, 1193,
     1194, 1194, 1195, 1195, 1196, 1196, 1197, 1197, 1198, 1198,
     1199, 1199, 1200, 1200, 1201, 1201, 1202, 1202, 1203, 1203,
     1204, 1204, 1205, 1205, 1206, 1206, 1207, 1207, 1208, 1208,
     1209, 1209, 1210, 1210, 1211, 1211, 1212, 1212, 1213, 1213,

     1214, 1214, 1215, 1215, 1216, 1216, 1217, 1217, 1218, 1218,
     1219, 1219, 1220, 1220, 1221, 1221, 1222, 1222, 1223, 1223,
     1224, 1224, 1225, 1225, 1226, 1226, 1227, 1227, 1228, 1228,
     1229, 1229, 1230, 1230, 1231, 1231, 1232, 1232, 1233, 1233,
     1234, 1234, 1235, 1235, 1236, 1236, 1237, 1237, 1238, 1238,
     1239, 1239, 1240, 1240, 1241, 1241, 1242, 1242, 1243, 1243,
     1244, 1244, 1245, 1245, 1246, 1246, 1247, 1247, 1248, 1248,
     1249, 1249, 1250, 1250, 1251, 1251, 1252, 1252, 1253, 1253,
     1254, 1254, 1255, 1255, 1256, 1256, 1257, 1257, 1258, 1258,
     1259, 1259, 1260, 1260, 1261, 1261, 1262, 1262, 1263, 1263,

     1264, 1264, 1265, 1265, 1266, 1266, 1267, 1267, 1268, 1268,
     1269, 1269, 1270, 1270, 1271, 1271, 1272, 1272, 1273, 1273,
     1274, 1274, 1275, 1275, 1276, 1276, 1277, 1277, 1278, 1278,
     1279, 1279, 1280, 1280, 1281, 1281, 1282, 1282, 1283, 1283,
     1284, 1284, 1285, 1285, 1286, 1286,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,

      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906,  906,  906,  906,  906,  906,  906,  906,
      906,  906,  906
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[12] =
    {   0,
1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "prob2.l"
#line 5 "prob2.l"
#include <iostream>
#include <algorithm>
#include <cmath>
#include <cstdlib>
#include <string>
#include <unordered_map>
#include <vector>
#include <cctype>
#include <cstring>
#include <set>

using namespace std;

string TOK_KEYWORD = "KEYWORD";
string TOK_NAME = "NAME";
string TOK_INT_LITERAL = "INT_LITERAL";
string TOK_REAL_LITERAL = "REAL_LITERAL";
string TOK_LOGICAL_LITERAL = "LOGICAL_LITERAL";
string TOK_CHAR_LITERAL = "CHAR_LITERAL";
string TOK_OPERATOR = "OPERATOR";
string TOK_LABEL = "LABEL";
string TOK_SPECIAL_CHAR = "SPECIAL_CHAR";
string TOK_DELIM = "DELIMITER";

char* lower_string(const char* str) {
  if (str == NULL) 
    return NULL;
  char* p = new char[strlen(str) + 1];
  for (size_t i = 0; i < strlen(str); i++) {
    p[i] = (char)tolower(str[i]);
  }
  p[strlen(str)] = '\0';
  return p;
}

struct LEXEME_INFO {
  string TOK_TYPE;
  int COUNT;
  set<string> FORMS;
};

unordered_map<string, LEXEME_INFO> LEXEME_INFO_MAP;

void INSTALL_DATA(string TOK, bool case_insensitive) {
  if (case_insensitive) {
    char* l_yytext = lower_string(yytext);
    string l_yytext_str(l_yytext);
    delete[] l_yytext;
    if (LEXEME_INFO_MAP.find(l_yytext_str) == LEXEME_INFO_MAP.end()) {
      LEXEME_INFO info;
      info.TOK_TYPE = TOK;
      info.COUNT = 1;
      info.FORMS.insert(yytext);
      LEXEME_INFO_MAP[l_yytext_str] = info;
    } else {
      LEXEME_INFO_MAP[l_yytext_str].COUNT++;
      LEXEME_INFO_MAP[l_yytext_str].FORMS.insert(yytext);
    }
  } else {
    if (LEXEME_INFO_MAP.find(yytext) == LEXEME_INFO_MAP.end()) {
      LEXEME_INFO info;
      info.TOK_TYPE = TOK;
      info.COUNT = 1;
      info.FORMS.insert(yytext);
      LEXEME_INFO_MAP[yytext] = info;
    } else {
      LEXEME_INFO_MAP[yytext].COUNT++;
      LEXEME_INFO_MAP[yytext].FORMS.insert(yytext);
    }
  }
}

char error_string[256];
bool error_to_print = true;

void print_error() {
  if (error_to_print) {
    cout << error_string << endl;
  }
}

#line 1359 "prob2.cpp"
#line 1360 "prob2.cpp"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			yy_size_t yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 112 "prob2.l"


#line 1580 "prob2.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 907 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1847 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 114 "prob2.l"

	YY_BREAK
case 2:
YY_RULE_SETUP
#line 115 "prob2.l"
{ INSTALL_DATA(TOK_KEYWORD, true);  }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "prob2.l"
{ INSTALL_DATA(TOK_NAME, true); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 117 "prob2.l"
{ INSTALL_DATA(TOK_INT_LITERAL, true); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 118 "prob2.l"
{ INSTALL_DATA(TOK_REAL_LITERAL, true); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 119 "prob2.l"
{ INSTALL_DATA(TOK_LOGICAL_LITERAL, true); }
	YY_BREAK
case 7:
/* rule 7 can match eol */
YY_RULE_SETUP
#line 120 "prob2.l"
{ INSTALL_DATA(TOK_CHAR_LITERAL, true); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 121 "prob2.l"
{ INSTALL_DATA(TOK_OPERATOR, true); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 122 "prob2.l"
{ INSTALL_DATA(TOK_DELIM, true); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 123 "prob2.l"
{ INSTALL_DATA(TOK_SPECIAL_CHAR, true); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 125 "prob2.l"
ECHO;
	YY_BREAK
#line 1704 "prob2.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 907 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 907 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 906);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		yy_size_t number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, yy_size_t  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        yy_size_t yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
yy_size_t yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 125 "prob2.l"


int main (int argc, char **argv) {
  for (int i = 1; i < argc; ++i) {
    if (string(argv[i]) == "--no-error-print") {
      error_to_print = false;
      for (int j = i; j < argc - 1; ++j) {
        argv[j] = argv[j + 1];
      }
      --argc;
      break;
    }
  }

  if (argc > 1) {
    yyin = fopen(argv[1], "r");
  } else {
    yyin = stdin;
  }

  if (error_to_print) {
    cout << "ERROR" << endl;
  }

  yylex();

  if (error_to_print) {
    cout << endl << endl;
  }
  
  vector<pair<string, string>> P_LEXEMES;
  for (auto &[normalized, info]: LEXEME_INFO_MAP) {
      for (const string &form: info.FORMS) {
        P_LEXEMES.push_back({form, normalized});
      }
    }
    sort(P_LEXEMES.begin(), P_LEXEMES.end());
    cout << "TOKEN\t\tCOUNT\t\tLEXEME" << endl;
    cout << "________________________________________" << endl;
    for (auto &[form, normalized]: P_LEXEMES) {
      if (LEXEME_INFO_MAP[normalized].TOK_TYPE.length() <= 7) {
        cout << LEXEME_INFO_MAP[normalized].TOK_TYPE << "\t\t" << LEXEME_INFO_MAP[normalized].COUNT << "\t\t" << form << endl;
      } else {
        cout << LEXEME_INFO_MAP[normalized].TOK_TYPE << "\t" << LEXEME_INFO_MAP[normalized].COUNT << "\t\t" << form << endl;
      }
    }
    return 0;


}

